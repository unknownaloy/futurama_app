// Mocks generated by Mockito 5.4.0 from annotations
// in futurama_app/test/unit_tests/home_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:futurama_app/data/models/character/character.dart' as _i5;
import 'package:futurama_app/data/models/info/info_model.dart' as _i2;
import 'package:futurama_app/data/models/question/question.dart' as _i6;
import 'package:futurama_app/repositories/api_services.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInfoModel_0 extends _i1.SmartFake implements _i2.InfoModel {
  _FakeInfoModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiServices extends _i1.Mock implements _i3.ApiServices {
  MockApiServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.InfoModel> getInfo() => (super.noSuchMethod(
        Invocation.method(
          #getInfo,
          [],
        ),
        returnValue: _i4.Future<_i2.InfoModel>.value(_FakeInfoModel_0(
          this,
          Invocation.method(
            #getInfo,
            [],
          ),
        )),
      ) as _i4.Future<_i2.InfoModel>);
  @override
  _i4.Future<List<_i5.Character>> getCharacters() => (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Character>>.value(<_i5.Character>[]),
      ) as _i4.Future<List<_i5.Character>>);
  @override
  _i4.Future<List<_i6.Question>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Question>>.value(<_i6.Question>[]),
      ) as _i4.Future<List<_i6.Question>>);
}
